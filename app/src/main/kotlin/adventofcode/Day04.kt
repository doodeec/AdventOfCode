/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package adventofcode

class Day04 {

    companion object {
        private const val RESOURCE_BASENAME = "day04"
        private const val RESOURCE_TEST = "${RESOURCE_BASENAME}_test.txt"
        private const val RESOURCE_INPUT = "${RESOURCE_BASENAME}_input.txt"
    }

    fun part1() {
        println("=== Part 1 ===")
        val testInput = getResourceAsStringCollection(RESOURCE_TEST)
        val testResult = getPart1(testInput)
        println("test result - $testResult")
        if (testResult != 18) throw Exception("example 1 not passing")

        val input = getResourceAsStringCollection(RESOURCE_INPUT)
        val result = getPart1(input)
        println("result - $result")
    }

    fun part2() {
        println("=== Part 2 ===")
        val testInput = getResourceAsStringCollection(RESOURCE_TEST)
        val testResult = getPart2(testInput)
        println("test result - $testResult")
        if (testResult != 9) throw Exception("example 2 not passing")

        val input = getResourceAsStringCollection(RESOURCE_INPUT)
        val result = getPart2(input)
        println("result - $result")
    }

    private fun getPart1(input: List<String>): Int {
        val regex = "XMAS".toRegex()

        var result = 0
        // horizontal search
        input.forEach { line ->
            val natural = regex.findAll(line).count()
            val reversed = regex.findAll(line.reversed()).count()
            result += natural
            result += reversed
        }

        input.windowed(4) { win ->
            val lineLength = win.first().length

            // vertical search
            (0..<lineLength).forEach { index ->
                val word = "${win[0][index]}${win[1][index]}${win[2][index]}${win[3][index]}"
                if (regex.matches(word)) result++
                if (regex.matches(word.reversed())) result++
            }

            // diagonal search LT-RB
            (0..<lineLength-3).forEach { index ->
                val word = "${win[0][index]}${win[1][index+1]}${win[2][index+2]}${win[3][index+3]}"
                if (regex.matches(word)) result++
                if (regex.matches(word.reversed())) result++
            }

            // diagonal search LB-RT
            (3..<lineLength).forEach { index ->
                val word = "${win[3][index-3]}${win[2][index-2]}${win[1][index-1]}${win[0][index]}"
                if (regex.matches(word)) result++
                if (regex.matches(word.reversed())) result++
            }
        }
        return result
    }

    private fun getPart2(input: List<String>): Int {
        var result = 0
        input.windowed(3).forEach { lines ->
            val lineLength = lines.first().length

            (1..lineLength-2).forEach { index ->
                if (lines.getLTRBWordAt(index).isMas() && lines.getLBRTWordAt(index).isMas()) result++
            }
        }
        return result
    }

    private fun List<String>.getLTRBWordAt(index: Int): String =
        "${this[0][index-1]}${this[1][index]}${this[2][index+1]}"

    private fun List<String>.getLBRTWordAt(index: Int): String =
        "${this[2][index-1]}${this[1][index]}${this[0][index+1]}"

    private fun String.isMas(): Boolean = this == "MAS" || this == "SAM"
}

fun main() {
    Day04().apply {
        part1()
        part2()
    }
}
