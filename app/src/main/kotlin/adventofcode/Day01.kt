/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package adventofcode

import kotlin.math.abs

class Day01 {

    fun part1() {
        println("=== Part 1 ===")
        val testInput = getResourceAsStringCollection("day01_test.txt")
        val testResult = getPart1(testInput)
        println("test result - $testResult")
        if (testResult != 11) throw Exception("example 1 not passing")

        val input = getResourceAsStringCollection("day01_input.txt")
        val result = getPart1(input)
        println("result - $result")
    }

    fun part2() {
        println("=== Part 2 ===")
        val testInput = getResourceAsStringCollection("day01_test.txt")
        val testResult = getPart2(testInput)
        println("test result - $testResult")
        if (testResult != 31) throw Exception("example 2 not passing")

        val input = getResourceAsStringCollection("day01_input.txt")
        val result = getPart2(input)
        println("result - $result")
    }

    private fun getPart1(input: List<String>): Int {
        val left = mutableListOf<Int>()
        val right = mutableListOf<Int>()

        input.forEach { line ->
            val parts = line.split("\\s+".toRegex())
            left.add(parts[0].toInt())
            right.add(parts[1].toInt())
        }

        left.sort()
        right.sort()
        assert(left.size == right.size)

        var result = 0
        left.forEachIndexed { index, i ->
            result += abs(i - right[index])
        }
        return result
    }

    private fun getPart2(input: List<String>): Int {
        val left = mutableListOf<Int>()
        val right = mutableListOf<Int>()

        input.forEach { line ->
            val parts = line.split("\\s+".toRegex())
            left.add(parts[0].toInt())
            right.add(parts[1].toInt())
        }

        assert(left.size == right.size)

        var result = 0
        left.forEach { i ->
            result += i * right.count { it == i }
        }
        return result
    }
}

fun main() {
    Day01().apply {
        part1()
        part2()
    }
}
