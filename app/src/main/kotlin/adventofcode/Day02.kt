/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package adventofcode

import kotlin.math.abs

class Day02 {

    fun part1() {
        println("=== Part 1 ===")
        val testInput = getResourceAsStringCollection("day02_test.txt")
        val testResult = getPart1(testInput)
        println("test result - $testResult")
        if (testResult != 2) throw Exception("example 1 not passing")

        val input = getResourceAsStringCollection("day02_input.txt")
        val result = getPart1(input)
        println("result - $result")
    }

    fun part2() {
        println("=== Part 2 ===")
        val testInput = getResourceAsStringCollection("day02_test.txt")
        val testResult = getPart2(testInput)
        println("test result - $testResult")
        if (testResult != 4) throw Exception("example 2 not passing")

        val input = getResourceAsStringCollection("day02_input.txt")
        val result = getPart2(input)
        println("result - $result")
    }

    private fun getPart1(input: List<String>): Int {
        return input.count { line ->
            line.split("\\s+".toRegex())
                .map { it.toInt() }
                .isSafe()
        }
    }

    private fun getPart2(input: List<String>): Int {
        return input.count { line ->
            val levels = line.split("\\s+".toRegex()).map { it.toInt() }
            if (levels.isSafe()) return@count true

            levels.indices.forEach { index ->
                if (levels.toMutableList().apply { removeAt(index) }.isSafe()) return@count true
            }

            return@count false
        }
    }

    private fun List<Int>.isSafe(): Boolean {
        val isIncr = this == this.sorted()
        val isDecr = this == this.sorted().reversed()

        if (isIncr || isDecr) {
            val isDiffOk = windowed(2).all { abs(it[0] - it[1]) in 1..3 }
            return isDiffOk
        }

        return false
    }
}

fun main() {
    Day02().apply {
        part1()
        part2()
    }
}
