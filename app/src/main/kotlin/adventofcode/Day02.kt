/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package adventofcode

class Day02 {

    private val maxValues = mapOf(
        "red" to 12,
        "green" to 13,
        "blue" to 14,
    )

    fun run() {
        //val resourceName = "day02_test.txt"
        val resourceName = "day02_input.txt"

        val input = this::class.java.classLoader.getResourceAsStream(resourceName)
            ?.bufferedReader()
            ?.readLines()
            ?: emptyList()

        // part 1
        /*val result = input
            .filter { it.validateGame() }
            .mapNotNull { it.getGameId() }
            .sum()*/
        
        // part 2
        val result = input
            .asSequence()
            .map { it.getGamePower() }
            .sum()

        println("result - $result")
    }

    private fun String.validateGame(): Boolean {
        return this.split(":", ";")
            // lose game name
            .drop(1)
            //.also { println("draws - $it") }
            .all { it.validateDraw() }
    }

    private fun String.validateDraw(): Boolean {
        val cubes = this.split(",").map { it.trim() }

        cubes.forEach { c ->
            val count = c.filter { it.isDigit() }.toIntOrNull() ?: 0
            val color = c.filter { it.isLetter() }

            //println("validateDraw $count $color")

            if (maxValues.containsKey(color)) {
                if (maxValues[color]!! < count) return false
            }
        }

        return true
    }
    
    private fun String.getGamePower(): Int {
        val minPower = mutableMapOf(
            "red" to 0,
            "green" to 0,
            "blue" to 0
        )
        
        this.split(":", ";")
            // lose game name
            .drop(1)
            .forEach { draw ->
                draw.split(",").forEach { c ->
                    val count = c.filter { it.isDigit() }.toIntOrNull() ?: 0
                    val color = c.filter { it.isLetter() }
                    
                    if (minPower.containsKey(color)) {
                        if (minPower[color]!! < count) minPower[color] = count
                    }
                }
                
            }
        
        return minPower["red"]!! * minPower["green"]!! * minPower["blue"]!!
    }

    private fun String.getGameId(): Int? = this
        .takeWhile { it != ':' }
        .filter { it.isDigit() }
        //.also { println("gameId - $it") }
        .toIntOrNull()
}

fun main() {
    Day02().run()
}
