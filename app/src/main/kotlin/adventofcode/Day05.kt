/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package adventofcode

class Day05 {

    companion object {
        private const val RESOURCE_BASENAME = "day05"
        private const val RESOURCE_TEST = "${RESOURCE_BASENAME}_test.txt"
        private const val RESOURCE_INPUT = "${RESOURCE_BASENAME}_input.txt"
    }

    fun part1() {
        println("=== Part 1 ===")
        val testInput = getResourceAsStringCollection(RESOURCE_TEST)
        val testResult = getPart1(testInput)
        println("test result - $testResult")
        if (testResult != 143) throw Exception("example 1 not passing")

        val input = getResourceAsStringCollection(RESOURCE_INPUT)
        val result = getPart1(input)
        println("result - $result")
    }

    fun part2() {
        println("=== Part 2 ===")
        val testInput = getResourceAsStringCollection(RESOURCE_TEST)
        val testResult = getPart2(testInput)
        println("test result - $testResult")
        if (testResult != 123) throw Exception("example 2 not passing")

        val input = getResourceAsStringCollection(RESOURCE_INPUT)
        val result = getPart2(input)
        println("result - $result")
    }

    private fun getPart1(input: List<String>): Int {
        var result = 0

        // process rules
        val rules = mutableSetOf<Rule>()
        input.takeWhile { it.isNotBlank() }.forEach { line ->
            val pages = line.split("|").map { it.toInt() }
            rules.add(Rule(raw = pages, before = pages[0], after = pages[1]))
        }

        // process updates
        input.dropWhile { it.isBlank() || it.contains("|") }.forEach { line ->
            val updates = line.split(",").map { it.toInt() }
            if (updates.areCorrectOrder(rules)) {
                val middle = updates[updates.size / 2]
                result += middle
            }
        }

        return result
    }

    private fun getPart2(input: List<String>): Int {
        var result = 0

        // process rules
        val rules = mutableSetOf<Rule>()
        input.takeWhile { it.isNotBlank() }.forEach { line ->
            val pages = line.split("|").map { it.toInt() }
            rules.add(Rule(raw = pages, before = pages[0], after = pages[1]))
        }

        // process updates
        input.dropWhile { it.isBlank() || it.contains("|") }.forEach { line ->
            val updates = line.split(",").map { it.toInt() }
            if (!updates.areCorrectOrder(rules)) {
                // update
                val fixedUpdates = updates.sortedWith(Comparator<Int> { o1, o2 ->
                    val rule = rules.find { o1 in it.raw && o2 in it.raw }
                    if (rule == null) return@Comparator 0
                    if (o1 == rule.before) return@Comparator -1
                    else return@Comparator 1
                })

                val middle = fixedUpdates[fixedUpdates.size / 2]
                result += middle
            }
        }

        return result
    }

    private fun List<Int>.areCorrectOrder(rules: Set<Rule>): Boolean {
        val affectedRules = rules.filter { it.before in this && it.after in this }
        return affectedRules.all { rule -> rule.raw == this.filter { it in rule.raw } }
    }

    private data class Rule(
        val raw: List<Int>,
        val before: Int,
        val after: Int,
    )
}

fun main() {
    Day05().apply {
        part1()
        part2()
    }
}
