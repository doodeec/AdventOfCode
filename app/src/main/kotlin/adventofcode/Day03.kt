/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package adventofcode

class Day03 {

    companion object {
        private val RESOURCE_BASENAME = "day03"
        private val RESOURCE_TEST = "${RESOURCE_BASENAME}_test.txt"
        private val RESOURCE_INPUT = "${RESOURCE_BASENAME}_input.txt"
    }

    fun part1() {
        println("=== Part 1 ===")
        val testInput = getResourceAsStringCollection(RESOURCE_TEST)
        val testResult = getPart1(testInput)
        println("test result - $testResult")
        if (testResult != 161) throw Exception("example 1 not passing")

        val input = getResourceAsStringCollection(RESOURCE_INPUT)
        val result = getPart1(input)
        println("result - $result")
    }

    fun part2() {
        println("=== Part 2 ===")
        val testInput = getResourceAsStringCollection(RESOURCE_TEST)
        val testResult = getPart2(testInput)
        println("test result - $testResult")
        if (testResult != 48) throw Exception("example 2 not passing")

        val input = getResourceAsStringCollection(RESOURCE_INPUT)
        val result = getPart2(input)
        println("result - $result")
    }

    private fun getPart1(input: List<String>): Int {
        val regex = "mul\\([0-9]{1,3},[0-9]{1,3}\\)".toRegex()

        val instructions = input.flatMap { line -> regex.findAll(line).map { it.value } }

        var result = 0
        instructions.forEach { i ->
            val numbers = i.substringAfter("mul(").substringBefore(")").split(",")
            val x = numbers[0].toInt() * numbers[1].toInt()
            result += x
        }
        return result
    }

    private fun getPart2(input: List<String>): Int {
        val instructionRegex = "mul\\([0-9]{1,3},[0-9]{1,3}\\)".toRegex()

        var read = true
        var word: String
        val buffer = StringBuffer()

        input.forEach { line ->
            word = line
            while (word.isNotEmpty()) {
                if (read) {
                    val i = word.indexOf("don't()")
                    if (i != -1) {
                        buffer.append(word.substring(0, i))
                        word = word.substring(i)
                        read = false
                    } else {
                        buffer.append(word)
                        word = ""
                    }
                } else {
                    val i = word.indexOf("do()")
                    if (i != -1) {
                        word = word.substring(i)
                        read = true
                    } else {
                        word = ""
                    }
                }
            }
        }

        var result = 0
        val instructions = instructionRegex.findAll(buffer).map { it.value }
        instructions.forEach { i ->
            val numbers = i.substringAfter("mul(").substringBefore(")").split(",")
            val x = numbers[0].toInt() * numbers[1].toInt()
            result += x
        }

        return result
    }
}

fun main() {
    Day03().apply {
        part1()
        part2()
    }
}
